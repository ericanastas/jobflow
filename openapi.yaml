openapi: "3.0.3"
info:
  title: Joboodle API
  version: "0.1.0"
servers:
  - url: https://joboodle.com/api
tags:
  - name: Jobs
    description: Jobs applications being tracked
  - name: Stages
    description: The stages of a job application
  - name: Job Stages
    description: Stages of job applications
  - name: Posts
    description: Job posts
  - name: Connections
    description: Connections to job posting sites
  - name: Queries
    description: Queries sent to a connections
  - name: Schedules
    description: Scheduled queries

paths:
  /api/connectors:
    get:
      tags: [Connections]
      summary: List installed connectors
      responses:
        200:
          $ref: "#/components/responses/ConnectorArrayRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/connections:
    get:
      tags: [Connections]
      summary: List connections
      responses:
        200:
          $ref: "#/components/responses/ConnectionArrayRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    post:
      tags: [Connections]
      summary: Create a connection
      requestBody:
        $ref: "#/components/requestBodies/PostConnectionReq"
      responses:
        201:
          $ref: "#/components/responses/ConnectionRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/connections/{connectionId}:
    parameters:
      - $ref: "#/components/parameters/connectionId"
    get:
      tags: [Connections]
      summary: Get a connection
      responses:
        200:
          $ref: "#/components/responses/ConnectionRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    put:
      tags: [Connections]
      summary: Update a connection
      requestBody:
        $ref: "#/components/requestBodies/PutConnectionReq"
      responses:
        200:
          $ref: "#/components/responses/ConnectionRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    delete:
      tags: [Connections]
      summary: Delete a connection
      responses:
        204:
          $ref: "#/components/responses/NoContentRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/stages:
    get:
      tags: [Stages]
      summary: List stages
      responses:
        200:
          $ref: "#/components/responses/StageArrayRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    post:
      tags: [Stages]
      summary: Create a stage
      requestBody:
        $ref: "#/components/requestBodies/PostStageReq"
      responses:
        201:
          $ref: "#/components/responses/StageRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/stages/{stageId}:
    parameters:
      - $ref: "#/components/parameters/stageId"
    get:
      tags: [Stages]
      summary: Get a stage
      responses:
        200:
          $ref: "#/components/responses/StageRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    put:
      tags: [Stages]
      summary: Update a stage
      requestBody:
        $ref: "#/components/requestBodies/PutStageReq"

      responses:
        200:
          $ref: "#/components/responses/StageRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    delete:
      tags: [Stages]
      summary: Delete a stage
      responses:
        204:
          $ref: "#/components/responses/NoContentRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/jobs:
    get:
      parameters:
        - $ref: "#/components/parameters/searchFilter"
        - $ref: "#/components/parameters/stageFilter"
        - $ref: "#/components/parameters/jobsSortBy"
        - $ref: "#/components/parameters/sortDesc"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/page"
      tags: [Jobs]
      summary: Lists jobs
      responses:
        200:
          $ref: "#/components/responses/JobCollectionRes"
    post:
      tags: [Jobs]
      summary: Create a job
      requestBody:
        $ref: "#/components/requestBodies/PostJobReq"
      responses:
        201:
          $ref: "#/components/responses/JobRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/jobs/{jobId}:
    parameters:
      - $ref: "#/components/parameters/jobId"
    get:
      tags: [Jobs]
      summary: Get a job
      responses:
        200:
          $ref: "#/components/responses/JobRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    put:
      tags: [Jobs]
      summary: Update a job
      requestBody:
        $ref: "#/components/requestBodies/PutJobReq"
      responses:
        200:
          $ref: "#/components/responses/JobRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    delete:
      tags: [Jobs]
      summary: Delete a job
      responses:
        204:
          $ref: "#/components/responses/NoContentRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/jobs/{jobId}/stages:
    parameters:
      - $ref: "#/components/parameters/jobId"
    get:
      tags: [Job Stages]
      summary: List stages of a job
      responses:
        200:
          $ref: "#/components/responses/JobStageArrayRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    post:
      tags: [Job Stages]
      summary: Create a job stage
      requestBody:
        $ref: "#/components/requestBodies/PostJobStageReq"
      responses:
        201:
          $ref: "#/components/responses/JobStageRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/job-stages/{jobStageId}:
    parameters:
      - $ref: "#/components/parameters/jobStageId"
    get:
      tags: [Job Stages]
      responses:
        200:
          $ref: "#/components/responses/JobStageRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    put:
      tags: [Job Stages]
      summary: Update a job stage
      requestBody:
        $ref: "#/components/requestBodies/PutJobStageReq"
      responses:
        200:
          $ref: "#/components/responses/JobStageRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    delete:
      tags: [Job Stages]
      summary: Delete a job stage
      responses:
        204:
          $ref: "#/components/responses/NoContentRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/posts:
    get:
      parameters:
        - $ref: "#/components/parameters/searchFilter"
        - $ref: "#/components/parameters/incomming"
        - $ref: "#/components/parameters/postsSortBy"
        - $ref: "#/components/parameters/sortDesc"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/page"

      tags: [Posts]
      summary: List posts
      responses:
        200:
          $ref: "#/components/responses/PostCollectionRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    post:
      tags: [Posts]
      summary: Create a post
      requestBody:
        $ref: "#/components/requestBodies/PostPostReq"
      responses:
        201:
          $ref: "#/components/responses/PostRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        500:
          $ref: "#/components/responses/ErrorRes"
  /api/posts/{postId}:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: [Posts]
      summary: Get a post
      responses:
        200:
          $ref: "#/components/responses/PostRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    put:
      tags: [Posts]
      summary: Update a post
      requestBody:
        $ref: "#/components/requestBodies/PutPostReq"
      responses:
        200:
          $ref: "#/components/responses/PostRes"
        400:
          $ref: "#/components/responses/BadRequestRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"
    delete:
      tags: [Posts]
      summary: Delete a post
      responses:
        204:
          $ref: "#/components/responses/NoContentRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"

  /api/posts/{postId}/matching-jobs:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: [Posts]
      summary: Get suggested jobs matching post
      responses:
        200:
          $ref: "#/components/responses/JobArrayRes"
        404:
          $ref: "#/components/responses/NotFoundRes"
        500:
          $ref: "#/components/responses/ErrorRes"

  /api/queries:
    get:
      tags: [Queries]
      responses:
        200:
          description: OK
  /api/connections/{connectionId}/queries:
    parameters:
      - $ref: "#/components/parameters/connectionId"
    get:
      tags: [Queries]
      responses:
        200:
          description: OK

  /api/queries/{queryId}:
    parameters:
      - $ref: "#/components/parameters/queryId"
    get:
      tags: [Queries]
      responses:
        200:
          description: OK
  /api/queries/{queryId}/results:
    parameters:
      - $ref: "#/components/parameters/queryId"
    get:
      tags: [Queries]
      responses:
        200:
          description: OK
  /api/queries/{queryId}/logs:
    parameters:
      - $ref: "#/components/parameters/queryId"
    get:
      tags: [Queries]
      responses:
        200:
          description: OK

components:
  parameters:
    pageSize:
      in: query
      name: pageSize
      description: The maximum number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
    page:
      in: query
      name: page
      description: The page of the collection
      required: false
      schema:
        type: integer
        minimum: 1
    searchFilter:
      in: query
      name: search
      description: Search query
      required: false
      schema:
        type: string

    sortDesc:
      in: query
      name: sortDesc
      description: Sort items in descending order. Sort is accending by default if ommitted.
      required: false
      schema:
        type: boolean

    jobsSortBy:
      in: query
      name: sortBy
      description: Field to sort jobs by
      required: false
      schema:
        type: string
        enum:
          - created
          - modified
          - stage
          - company
          - location
          - title

    postsSortBy:
      in: query
      name: sortBy
      description: Field to sort posts by
      required: false
      schema:
        type: string
        enum:
          - created
          - modified
          - company
          - location
          - title

    stageFilter:
      in: query
      description: Filter by current stage
      name: stageIds
      required: false
      explode: false
      schema:
        type: array
        uniqueItems: true
        items:
          type: integer

    incomming:
      in: query
      name: incomming
      description: Filter incoming posts that have or have not been assigned to a job
      required: false
      schema:
        type: boolean

    stageId:
      in: path
      name: stageId
      description: The id of a stage
      required: true
      schema:
        type: integer
    connectionId:
      in: path
      name: connectionId
      description: The id of a connection
      required: true
      schema:
        type: integer
    queryId:
      in: path
      name: queryId
      description: The id of a query
      required: true
      schema:
        type: integer
    jobId:
      in: path
      name: jobId
      description: The id of a job
      required: true
      schema:
        type: integer
    jobStageId:
      in: path
      name: jobStageId
      description: The id of a stage of a specific job
      required: true
      schema:
        type: integer
    postId:
      in: path
      name: postId
      description: The id of job posting
      required: true
      schema:
        type: integer

  responses:
    ErrorRes:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            status: 500
            name: "Error"
            message: "I'm sorry Dave. I'm afraid I can't do that."
    BadRequestRes:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            status: 400
            name: "Bad Request"
            message: "request/params/contextId must be integer"
    NotFoundRes:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            status: 404
            name: "Not Found"
            message: "Item not found"
    NoContentRes:
      description: No Content
    ConnectorArrayRes:
      description: Connector Array
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConnectorArray"
    ConnectionArrayRes:
      description: Connection Array
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConnectionArray"
    ConnectionRes:
      description: Connection
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Connection"
    StageRes:
      description: Stage
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Stage"

    StageArrayRes:
      description: Stage Array
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StageArray"

    JobRes:
      description: Job
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Job"

    JobCollectionRes:
      description: Job Collection
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobCollection"

    JobArrayRes:
      description: Job Array
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobArray"

    JobStageRes:
      description: Job Stage
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobStage"

    JobStageArrayRes:
      description: Job Stage Array
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobStageArray"

    PostRes:
      description: Post
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"

    PostArrayRes:
      description: Post Array
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PostArray"

    PostCollectionRes:
      description: Post Collection
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PostCollection"

  requestBodies:
    PostConnectionReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              connectorName:
                $ref: "#/components/schemas/Connection/properties/connectorName"
              name:
                $ref: "#/components/schemas/Connection/properties/name"
              config:
                $ref: "#/components/schemas/Connection/properties/config"
    PutConnectionReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                $ref: "#/components/schemas/Connection/properties/name"
              config:
                $ref: "#/components/schemas/Connection/properties/config"
    PostStageReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              sortOrder:
                $ref: "#/components/schemas/Stage/properties/sortOrder"
              name:
                $ref: "#/components/schemas/Stage/properties/name"
              color:
                $ref: "#/components/schemas/Stage/properties/color"
    PutStageReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              sortOrder:
                $ref: "#/components/schemas/Stage/properties/sortOrder"
              name:
                $ref: "#/components/schemas/Stage/properties/name"
              color:
                $ref: "#/components/schemas/Stage/properties/color"
    PostJobReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - primaryPostId
            properties:
              primaryPostId:
                $ref: "#/components/schemas/Job/properties/primaryPostId"
              comments:
                $ref: "#/components/schemas/Job/properties/comments"
    PutJobReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              primaryPostId:
                $ref: "#/components/schemas/Job/properties/primaryPostId"
              comments:
                $ref: "#/components/schemas/Job/properties/comments"
    PostJobStageReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - stageId
              - timestamp
            properties:
              stageId:
                $ref: "#/components/schemas/JobStage/properties/stageId"
              timestamp:
                $ref: "#/components/schemas/JobStage/properties/timestamp"
              comments:
                $ref: "#/components/schemas/JobStage/properties/comments"
              url:
                $ref: "#/components/schemas/JobStage/properties/url"
    PutJobStageReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - stageId
              - timestamp
            properties:
              stageId:
                $ref: "#/components/schemas/JobStage/properties/stageId"
              timestamp:
                $ref: "#/components/schemas/JobStage/properties/timestamp"
              comments:
                $ref: "#/components/schemas/JobStage/properties/comments"
              url:
                $ref: "#/components/schemas/JobStage/properties/url"

    PostPostReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - company
              - title
              - description
              - location
            properties:
              jobId:
                $ref: "#/components/schemas/Post/properties/jobId"
              url:
                $ref: "#/components/schemas/Post/properties/url"
              company:
                $ref: "#/components/schemas/Post/properties/company"
              location:
                $ref: "#/components/schemas/Post/properties/location"
              title:
                $ref: "#/components/schemas/Post/properties/title"
              description:
                $ref: "#/components/schemas/Post/properties/description"
    PutPostReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - title
              - company
              - location
              - description
            properties:
              jobId:
                $ref: "#/components/schemas/Post/properties/jobId"
              url:
                $ref: "#/components/schemas/Post/properties/url"
              comments:
                $ref: "#/components/schemas/Post/properties/company"
              location:
                $ref: "#/components/schemas/Post/properties/location"
              title:
                $ref: "#/components/schemas/Post/properties/title"
              description:
                $ref: "#/components/schemas/Post/properties/description"

  schemas:
    Stage:
      type: object
      properties:
        id:
          type: integer
        sortOrder:
          type: integer
        name:
          type: string
          example: Interviewing
        color:
          type: string
          example: "#6200ff"
          description: Hex code of color used to identify stage
    StageArray:
      type: array
      items:
        $ref: "#/components/schemas/Stage"
    Connector:
      type: object
      properties:
        name:
          type: string
          example: linkedin
        version:
          type: string
          example: "0.1.0"
        description:
          type: string
          example: Queries linked.com for job postings
        configSchema:
          type: object
        querySchema:
          type: object
    ConnectorArray:
      type: array
      items:
        $ref: "#/components/schemas/Connector"
    Connection:
      type: object
      properties:
        id:
          type: integer
          description: Id of connection
        connectorName:
          type: string
          description: name of the connector
          example: ACME Jobs
        name:
          type: string
          example: ACME Job Board Site
          description: Name of the connection

        config:
          nullable: true
          type: object
          description: Configuration of connection that matches `configSchema` of connector
    ConnectionArray:
      type: array
      items:
        $ref: "#/components/schemas/Connection"
    Job:
      type: object
      properties:
        id:
          type: string
        comments:
          type: string
          example: Comments about job
        primaryPostId:
          type: integer
        created:
          $ref: "#/components/schemas/Timestamp"
        modified:
          $ref: "#/components/schemas/Timestamp"

        _embedded:
          type: object
          properties:
            currentStage:
              $ref: "#/components/schemas/Stage"
            primaryPost:
              $ref: "#/components/schemas/Post"
    JobCollection:
      type: object
      description: A collection of jobs
      allOf:
        - $ref: "#/components/schemas/Collection"
      properties:
        _embedded:
          type: object
          properties:
            jobs:
              type: array
              items:
                $ref: "#/components/schemas/Job"
    JobArray:
      type: array
      items:
        $ref: "#/components/schemas/Job"
    JobStage:
      type: object
      properties:
        id:
          type: integer
        jobId:
          type: integer
          description: Id of the job
        stageId:
          type: integer
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        comments:
          type: string
          example: Comments about stage transition
        url:
          type: string
          example: https://mail.google.com/mail/u/0/#inbox/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        _embedded:
          type: object
          properties:
            stage:
              $ref: "#/components/schemas/Stage"
    JobStageArray:
      type: array
      items:
        $ref: "#/components/schemas/JobStage"
    Post:
      type: object
      properties:
        id:
          type: integer
        jobId:
          type: integer
          nullable: true
        isPrimary:
          type: boolean
          nullable: true
        connectionId:
          type: integer
          nullable: true
        uniqueId:
          type: string
          nullable: true
          example: ABC123
        url:
          type: string
          example: https://www.acme.com/jobs/rocket-surgeon
        company:
          type: string
          example: ACME Inc
        location:
          type: string
          example: San Francisco, CA
        title:
          type: string
          example: Rocket Surgeon
        description:
          type: string
          example: Combine the precision of a rocket scientist with the hands-on expertise of a brain surgeon to troubleshoot complex systems and occasionally remind people that duct tape isn't always the solution. Must thrive under pressure, preferably without launching it into orbit.
        _embedded:
          type: object
          properties:
            connection:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/Connection/properties/id"
                name:
                  $ref: "#/components/schemas/Connection/properties/name"
                connectorName:
                  $ref: "#/components/schemas/Connection/properties/connectorName"

    PostArray:
      type: array
      items:
        $ref: "#/components/schemas/Post"

    PostCollection:
      type: object
      description: A collection of posts
      allOf:
        - $ref: "#/components/schemas/Collection"
      properties:
        _embedded:
          type: object
          properties:
            posts:
              type: array
              items:
                $ref: "#/components/schemas/Post"
    Timestamp:
      type: string
      format: date-time
      example: 2024-01-01T00:00:00Z
    Error:
      type: object
      properties:
        status:
          type: integer
          description: HTTP Response Status Code
          example: 500
        name:
          type: string
          description: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4)
          example: Error
        message:
          type: string
          description: A human readable message related to the current error which may be displayed to the user of the api.
          example: I'm sorry Dave. I'm afraid I can't do that.
    Collection:
      type: object
      description: A paginated collection of items
      properties:
        page:
          type: integer
          description: The current page
          example: 1
        pageSize:
          type: integer
          description: The maximum number of items per page
          example: 5
        pages:
          type: integer
          description: The total number of pages
          example: 5
        count:
          type: integer
          description: The number of items returned
          example: 5
        total:
          type: integer
          description: The total number of items
          example: 25
